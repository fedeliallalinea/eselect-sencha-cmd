# -*-eselect-*-  sencha-cmd: ft=eselect
# Copyright 2005-2012 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manage the SenchaCmd symlink"
MAINTAINER="fedeliallalinea@gmail.com"
VERSION="20190104"

OPT_PATH="${EROOT%/}/opt"
BUILD_TOOLS_PATH="${OPT_PATH}/sencha-cmd"

BIN_TARGET="sencha"


# find a list of SenchaCmd targets
find_targets() {
    local f
    for f in "${BUILD_TOOLS_PATH}"/[[:digit:]]*; do
        [[ -d ${f} ]] && basename "${f}"
    done
}

# get active SenchaCmd target
active_target() {
        if [[ -h "${OPT_PATH}/bin/${BIN_TARGET}" ]] ; then
		local REAL_PATH=$(dirname "$(canonicalise "${OPT_PATH}/bin/${BIN_TARGET}")")
		echo ${REAL_PATH##*/}
        else
                echo "(none)"
        fi
}

check_symlinks() {
	if [[ "$(active_target)" != "(none)" ]]; then 
		local BIN="${OPT_PATH}/bin/${BIN_TARGET}"
		if [[ -e ${BIN} && ! -h ${BIN} ]]; then
			# we have something strange
			echo "${BIN} exists but is not a symlink"
		fi
	fi
}

remove_symlink() {
	if [[ -h "${OPT_PATH}/bin/${BIN_TARGET}" ]]; then
		rm "${OPT_PATH}/bin/${BIN_TARGET}"
	fi
}

set_symlink() {
	local target=$1

	if is_number "${target}"; then
		local targets=( $(find_targets) )
		target=${targets[target-1]}
	fi

	if [[ -z ${target} ]]; then
		die -q "Target \"$1\" doesn't appear to be valid!"
	elif [[ -f ${BUILD_TOOLS_PATH}/${target}/${BIN_TARGET} ]]; then
		[[ ! -d "${OPT_PATH}/bin" ]] && mkdir -p "${OPT_PATH}/bin"
		if [[ -e "${BUILD_TOOLS_PATH}/${target}/${BIN_TARGET}" ]]; then
			ln -s "${BUILD_TOOLS_PATH}/${target}/${BIN_TARGET}" \
				"${OPT_PATH}/bin/${BIN_TARGET}"
		fi
	else
		die -q "Target \"$1\" doesn't appear to be valid!"
	fi
}


### list action ###

describe_list() {
    echo "List available SenchaCmd targets"
}

do_list() {
    local i targets=( $(find_targets) )

    write_list_start "Available SenchaCmd targets:"
    for (( i = 0; i < ${#targets[@]}; i++ )); do
        # highlight the target where the symlink is pointing to
        [[ ${targets[i]} = \
            $(active_target) ]] \
            && targets[i]=$(highlight_marker "${targets[i]}")
    done
    write_numbered_list -m "(none found)" "${targets[@]}"
}


### Show Action ###
describe_show() {
        echo "Show which slot is currently active."
}

do_show() {
        echo $(active_target)
}


### set action ###

describe_set() {
	echo "Set a new SenchaCmd target"
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

do_set() {
	[[ -z $1 ]] && die -q "You didn't tell me what to set the SenchaCmd target to"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	local SYMLINK_ERROR=$(check_symlinks);
	if [[ -n ${SYMLINK_ERROR} ]]; then
		die -q "${SYMLINK_ERROR}"
	else
		remove_symlink || die -q "Couldn't remove existing symlinks"
		set_symlink "$1" || die -q "Couldn't set a new symlinks"
	fi
}
